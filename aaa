local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/sTempestHUB/scripts/main/library'))()
	
	local Window = Library:CreateWindow({
	    Title = 'sTempestHub | [ðŸ’¥RELEASE] Anime Fighting Simulator X',
	    Center = true, 
	    AutoShow = true,
	})
	
	local Tabs = {
	    Main = Window:AddTab('Main')
	}
	
	local autoFarmGroupBox = Tabs.Main:AddLeftGroupbox('Auto Mob')
	local autoTrainGroupBox = Tabs.Main:AddRightGroupbox('Auto Train')
	
	-- MAIN
	
	local mobArrayTable = {}
	local allAreas = {}
	local arrayTrainList = {"Strength", "Durability", "Chakra", "Sword"}
	
	local function mobsDropdownUpdate(dropdown)
		table.clear(mobArrayTable)
		for i, v in pairs(workspace.Scriptable.Mobs:GetChildren()) do
			if v:IsA("Model") then
				local pureString = v.Name:gsub("^%l", string.upper):match("%a+")
				if not table.find(mobArrayTable, pureString) then
					table.insert(mobArrayTable, pureString)
					dropdown:SetValues(mobArrayTable)
				end
			end
		end
	end
	
	local function getAreasByType(type, dropdown)
		table.clear(allAreas)
		table.insert(allAreas, "None")
		if tostring(type) == "Sword" then return end
		for i, v in pairs(workspace.Scriptable.TrainingsAreas:GetChildren()) do
			local reqText = v.BillboardHandler.TrainingBillboard.Frame.Requierement.Text
			local short = string.sub(reqText, 33, 50)
			if short:match("%d+%p%d+") ~= nil then
				local all = short:match("%d+%p%d+%s%w+")
				local onlyNumber = all:match("%d+%p%d+")
				local onlyType = all:match("%u%l+")
				if onlyType == tostring(type) and not table.find(allAreas, tostring(onlyNumber)) then
					table.insert(allAreas, tostring(onlyNumber))
					dropdown:SetValues(allAreas)
				end
			end
			if short:match("%d+%u%s") ~= nil then
				local all = short:match("%d+%u%s%w+")
				local onlyNumber = all:match("%d+%u")
				local onlyType = all:match("%u%l+")
				if onlyType == tostring(type) and not table.find(allAreas, tostring(onlyNumber)) then
					table.insert(allAreas, tostring(onlyNumber))
					dropdown:SetValues(allAreas)
				end
			end
		end
	end
	
	autoFarmGroupBox:AddToggle('AutoMobToggle', {
	    Text = 'Auto Mob',
	    Default = false,
	    Tooltip = 'Enable/Disabled auto farm',
	})
	
	autoFarmGroupBox:AddDropdown('mobDropdown', {
	
	    Values = mobArrayTable,
	    Default = 1, 
	    Multi = true,
	
	    Text = 'Choose the enemy',
	    Tooltip = 'You can choose multiples enemys',
	})
	
	autoFarmGroupBox:AddDropdown('killTypeDropdown', {
	
	    Values = {"Strength", "Sword"},
	    Default = 1, 
	    Multi = false,
	
	    Text = 'Choose the weapon to kill the mobs!',
	    Tooltip = 'Choose the weapon to kill the mobs!',
	})
	
	autoFarmGroupBox:AddButton('Refresh the mobs', function()
	    mobsDropdownUpdate(Options.mobDropdown)
	end)
	
	autoTrainGroupBox:AddToggle('AutoTrainToggle', {
	    Text = 'Auto Train',
	    Default = false,
	    Tooltip = 'Enable/Disabled auto train',
	})
	
	autoTrainGroupBox:AddToggle('SecondaryTrainToggle', {
	    Text = 'Train speed at the same time',
	    Default = false,
	    Tooltip = 'Enable/Disabled secondary train!',
	})
	
	autoTrainGroupBox:AddDropdown('trainTypeDropdown', {
	
	    Values = arrayTrainList,
	    Default = 1, 
	    Multi = false,
	
	    Text = 'Choose what you want to train',
	    Tooltip = 'Choose what you want to train',
	})
	
	autoTrainGroupBox:AddToggle('trainInAreasToggle', {
	    Text = 'Train in area',
	    Default = false,
	    Tooltip = 'Enable/Disabled train in area!',
	})
	
	autoTrainGroupBox:AddDropdown('areasToTrainDropdown', {
	
	    Values = allAreas,
	    Default = "None", 
	    Multi = false,
	
	    Text = 'Choose are to train',
	    Tooltip = 'Choose what area you want to train',
	})
	
	autoTrainGroupBox:AddButton('Refresh the areas', function()
	    getAreasByType(tostring(Options.trainTypeDropdown.Value), Options.areasToTrainDropdown)
	end)
	
	mobsDropdownUpdate(Options.mobDropdown)
	getAreasByType(tostring(Options.trainTypeDropdown.Value), Options.areasToTrainDropdown)
	
	local function tpToArea(trainType, areaSelected)
		for i, v in pairs(workspace.Scriptable.TrainingsAreas:GetChildren()) do
			local reqText = v.BillboardHandler.TrainingBillboard.Frame.Requierement.Text
			local short = string.sub(reqText, 33, 50)
			if short:match("%d+%p%d+") ~= nil then
				local all = short:match("%d+%p%d+%s%w+")
				local onlyNumber = all:match("%d+%p%d+")
				local onlyType = all:match("%u%l+")
				if onlyType == tostring(trainType) and onlyNumber == tostring(areaSelected) then
					if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-v.Position).magnitude > 30 then
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
					end
				end
			end
			if short:match("%d+%u%s") ~= nil then
				local all = short:match("%d+%u%s%w+")
				local onlyNumber = all:match("%d+%u")
				local onlyType = all:match("%u%l+")
				if onlyType == tostring(trainType) and onlyNumber == tostring(areaSelected) then
					if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-v.Position).magnitude > 30 then
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
					end
				end
			end
		end
	end
	
	local function autoTrainFunc(trainType, boolean, areaSelected)
		game.ReplicatedStorage.Events["Stats/RemoteFunction"]:InvokeServer("TrainStat", tostring(trainType))
		if boolean == true and areaSelected ~= "None" then
			tpToArea(trainType, areaSelected)
		end
	end
	local function getNearestMobs(array)
		local dist, thing = math.huge
		for i, v in pairs(workspace.Scriptable.Mobs:GetChildren()) do
			if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
				local trueName = v.Name:gsub("^%l", string.upper):match("%a+")
				if table.find(array, trueName) then
					local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
		            if mag < dist then
		                dist = mag
		                thing = v
		            end
					return thing
		        end
			end
		end
	end
	local function autoMobFunc(array, killType)
		for i, v in pairs(workspace.Scriptable.Mobs:GetChildren()) do
			if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
				local trueName = v.Name:gsub("^%l", string.upper):match("%a+")
				if table.find(array, trueName) and v == getNearestMobs(array) then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = getNearestMobs(array).HumanoidRootPart.CFrame*CFrame.new(0,0,5)
					game.ReplicatedStorage.Events["Stats/RemoteFunction"]:InvokeServer("TrainStat", tostring(killType))
				end
			end
		end
	end
	
	local mobsArraySelected = {}
	table.clear(mobsArraySelected)
	Options.mobDropdown:OnChanged(function()
		table.clear(mobsArraySelected)
	    for key, value in next, Options.mobDropdown.Value do
	        if not table.find(mobsArraySelected, key) then
	        	table.insert(mobsArraySelected, key)
	        end
	    end
	end)
	
	local c1 = coroutine.create(function() while true do if Toggles.AutoMobToggle.Value == true then autoMobFunc(mobsArraySelected, Options.killTypeDropdown.Value) end wait() end end) coroutine.resume(c1)
	local c2 = coroutine.create(function() while true do if Toggles.AutoTrainToggle.Value == true then autoTrainFunc(Options.trainTypeDropdown.Value, Toggles.trainInAreasToggle.Value, Options.areasToTrainDropdown.Value) end wait() end end) coroutine.resume(c2)
	local c3 = coroutine.create(function() while true do if Toggles.SecondaryTrainToggle.Value == true then game.ReplicatedStorage.Events["Stats/RemoteFunction"]:InvokeServer("TrainStat", "Speed") end wait() end end) coroutine.resume(c3)

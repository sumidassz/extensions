local Library = loadstring(game:HttpGet('https://pastebin.com/raw/qYTfV8u7'))()

local Window = Library:CreateWindow({
    Title = 'sTempestHub | [DUNGEON] Anime World',
    Center = true, 
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'), 
    LB = Window:AddTab('Leaderboards'), 
}

local autoFarmGroupBox = Tabs.Main:AddLeftGroupbox('Auto Farm')
local miscGroupBox = Tabs.Main:AddLeftGroupbox('Misc')
local autoBossGroupBox = Tabs.Main:AddRightGroupbox('Auto Boss Raid')
local autoDungeonGroupBox = Tabs.Main:AddRightGroupbox('Auto Dungeon')

local totalEnergyBox = Tabs.LB:AddLeftGroupbox('Total Energy')
local petsHatchedBox = Tabs.LB:AddLeftGroupbox('Pets Hatched')
local totalGemsBox = Tabs.LB:AddRightGroupbox('Total Gems')
local timePlayedBox = Tabs.LB:AddRightGroupbox('Time Played')

-- MAIN

local mobArrayTable = {}
local artefactsArray = {}

local function mobDropdown(dropdown)
	table.clear(mobArrayTable)
	for i, k in pairs(workspace.Client.Mobs:GetChildren()) do
		if k:FindFirstChild("HumanoidRootPart") and k:FindFirstChild("HumanoidRootPart"):FindFirstChild("DefaultHud") and k:FindFirstChild("HumanoidRootPart"):FindFirstChild("DefaultHud"):FindFirstChild("Username") then
			if not table.find(mobArrayTable, k.HumanoidRootPart.DefaultHud.Username.Text) then
				table.insert(mobArrayTable, k.HumanoidRootPart.DefaultHud.Username.Text)
				dropdown:SetValues(mobArrayTable)
			end
		end
	end
end

local function artefactsDropdown(dropdown)
	table.clear(artefactsArray)
	for i, v in pairs(game.Players.LocalPlayer.PlayerGui.UI.OffSet.Frames.Artefacts.Frame.Gradient.List:GetChildren()) do
		if v:IsA("ImageLabel") and not table.find(artefactsArray, v.Name) then
			table.insert(artefactsArray, v.Name)
			dropdown:SetValues(artefactsArray)
		end
	end
end

autoFarmGroupBox:AddToggle('AutoOFarmToggle', {
    Text = 'only Farm',
    Default = false,
    Tooltip = 'Enable/Disabled auto farm',
})

autoFarmGroupBox:AddToggle('AutoFarmToggle', {
    Text = 'Auto Farm',
    Default = false,
    Tooltip = 'Enable/Disabled auto farm',
})

autoFarmGroupBox:AddToggle('AutoSkillToggle', {
    Text = 'Auto Skill',
    Default = false,
    Tooltip = 'Enable/Disabled auto skill',
})

autoFarmGroupBox:AddDropdown('autoFarmDropdown', {

    Values = mobArrayTable,
    Default = 1, 
    Multi = true,

    Text = 'Choose the enemy',
    Tooltip = 'You can choose multiples enemys',
})

autoFarmGroupBox:AddButton('Refresh the enemies', function()
    mobDropdown(Options.autoFarmDropdown)
end)

miscGroupBox:AddToggle('AutoCollectToggle', {
    Text = 'Auto Collect',
    Default = false,
    Tooltip = 'Enable/Disabled auto collect',
})

autoDungeonGroupBox:AddToggle('AutoDungeonToggle', {
    Text = 'Auto Dungeon',
    Default = false,
    Tooltip = 'Enable/Disabled auto dungeon',
})

autoBossGroupBox:AddToggle('AutoBossToggle', {
    Text = 'Auto Boss',
    Default = false,
    Tooltip = 'Enable/Disabled auto boss',
})

autoBossGroupBox:AddDropdown('whichRaidDropdown', {

    Values = {"Piece Boss", "Dragon Boss", "Ninja Boss", "Bizarre Boss", "Slayer Boss", "Academy Boss", "Jujutsu Boss"},
    Default = 1, 
    Multi = true,

    Text = 'Choose the worlds to do raid',
    Tooltip = 'Choose the world to do the boss raid',
})

autoBossGroupBox:AddDropdown('afterWorldDropdown', {

    Values = {"Piece World", "Dragon World", "Ninja World", "Bizarre World", "Slayer World", "Academy World", "Jujutsu World"},
    Default = 1, 
    Multi = false,

    Text = 'Choose a world',
    Tooltip = 'Choose the world to TP after boss raid',
})

autoDungeonGroupBox:AddDropdown('afterWorldDungeonDropdown', {

    Values = {"Piece World", "Dragon World", "Ninja World", "Bizarre World", "Slayer World", "Academy World", "Jujutsu World"},
    Default = 1, 
    Multi = false,

    Text = 'Choose a world',
    Tooltip = 'Choose the world to TP after dungeon',
})

autoDungeonGroupBox:AddDropdown('artefactEnterDropdown', {

    Values = artefactsArray,
    Default = 1, 
    Multi = false,

    Text = 'Choose artefact to equp when enter',
    Tooltip = 'Choose the artefact to equip when enter the dungeon',
})

autoDungeonGroupBox:AddDropdown('artefactExitDropdown', {

    Values = artefactsArray,
    Default = 1, 
    Multi = false,

    Text = 'Choose artefact to equp when exit',
    Tooltip = 'Choose the artefact to equip when exit the dungeon',
})

autoDungeonGroupBox:AddButton('Refresh the artefacts', function()
    artefactsDropdown(Options.artefactEnterDropdown)
    artefactsDropdown(Options.artefactExitDropdown)
end)

artefactsDropdown(Options.artefactEnterDropdown)
artefactsDropdown(Options.artefactExitDropdown)
mobDropdown(Options.autoFarmDropdown)
local function getNearestAll(array)
    local dist, thing = math.huge
    for i, v in next, workspace.Client.Mobs:GetChildren() do
        if v.HumanoidRootPart.DefaultHud.Enabled == true and table.find(array, v.HumanoidRootPart.DefaultHud.Username.Text) then
            local mag =
                (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
            if mag < dist then
                dist = mag
                thing = v
            end
        end
    end
    return thing
end
local function getNearestAlla()
    local dist, thing = math.huge
    for i, v in next, workspace.Client.Mobs:GetChildren() do
        if v.HumanoidRootPart.DefaultHud.Enabled == true then
            local mag =
                (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
            if mag < dist then
                dist = mag
                thing = v
            end
        end
    end
    return thing
end
local function autoMobFunc(array)
	for l, world in pairs(workspace.Server.Mobs:GetChildren()) do
		for i, v in pairs(workspace.Server.Mobs[tostring(world)]:GetChildren()) do
			if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
				for _, k in pairs(workspace.Client.Mobs:GetChildren()) do
					if table.find(array, k.HumanoidRootPart.DefaultHud.Username.Text) and v.Name == k.Name and k == getNearestAll(array) and workspace.Client.Mobs:FindFirstChild(tostring(getNearestAll(array))) then
						game.ReplicatedStorage.Remotes.Server:FireServer({"RunQuest"})
						game.ReplicatedStorage.Remotes.Server:FireServer({"MobHit", world:FindFirstChild(tostring(getNearestAll(array))), "WeaponAttack"})
						if Toggles.AutoSkillToggle.Value == true then game.ReplicatedStorage.Remotes.Server:FireServer({"Skill", "Use", world:FindFirstChild(tostring(getNearestAll(array)))}) end
						if game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.X ~= getNearestAll(array).HumanoidRootPart.CFrame.X*0.1 and game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z ~= getNearestAll(array).HumanoidRootPart.Position.Z then
							game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(getNearestAll(array).HumanoidRootPart.Position.X, getNearestAll(array).HumanoidRootPart.Position.Y, getNearestAll(array).HumanoidRootPart.Position.Z)*CFrame.new(.1,0,0)
						end
					end
				end
			end
		end
	end
end
local function autoBossFunc(afterWorld, array)
	if array ~= nil then
		for _, world in pairs(workspace.Server.Mobs:GetChildren()) do
			if table.find(array, world.Name) then 
				if #world:GetChildren() == 1 then
					for p, mobServer in pairs(world:GetChildren()) do
						for i, mobClient in pairs(workspace.Client.Mobs:GetChildren()) do
							if #workspace.Client.Mobs:GetChildren() > 1 then
								game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = mobServer.CFrame*CFrame.new(0.1,0,0)
							elseif #workspace.Client.Mobs:GetChildren() == 1 then
								game.ReplicatedStorage.Remotes.Server:FireServer({"MobHit", mobServer, "WeaponAttack"})
								if Toggles.AutoSkillToggle.Value == true then game.ReplicatedStorage.Remotes.Server:FireServer({"Skill", "Use", mobServer}) end
								if game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.X ~= mobClient.HumanoidRootPart.CFrame.X*0.1 and game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z ~= mobClient.HumanoidRootPart.Position.Z then
									game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(mobClient.HumanoidRootPart.Position.X, mobClient.HumanoidRootPart.Position.Y, mobClient.HumanoidRootPart.Position.Z)*CFrame.new(.1,0,0)
								end
							end
						end
					end
				end
			end
			if world.Name ~= "Dungeon" and #workspace.Client.Mobs:GetChildren() == 0 and #world:GetChildren() == 0 and afterWorld ~= "" then
				game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Server.Zones[tostring(afterWorld)].CFrame
			end
		end
	end
end
local function autoDungeonFunc(afterWorld, artefactEnter, artefactExit)
	game.ReplicatedStorage.Remotes.Server:FireServer({"Dungeon", "Enter"})
	local world = workspace.Server.Mobs.Dungeon
	local clientFolder = workspace.Client.Mobs
	--for p, k in pairs(world:GetChildren()) do
		for i, v in pairs(clientFolder:GetChildren()) do
			if #world:GetChildren() >= 1 and world:FindFirstChild(tostring(getNearestAlla())) then
				if table.find(artefactsArray, artefactEnter) then game.ReplicatedStorage.Remotes.Server:FireServer({"ArtefactStatus", "Equip", tostring(artefactEnter)}) end
				game.ReplicatedStorage.Remotes.Server:FireServer({"MobHit", world[getNearestAlla().Name], "WeaponAttack"})
				if Toggles.AutoSkillToggle.Value == true then game.ReplicatedStorage.Remotes.Server:FireServer({"Skill", "Use", world[getNearestAlla().Name]}) end
				game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = getNearestAlla().HumanoidRootPart.CFrame*CFrame.new(0.1,0,0)
			end
		end
	--end
	if game.Players.LocalPlayer.PlayerGui.UI.OffSet.Waves.Left.Shadow.Text == "60:58" and afterWorld ~= "" then 
		game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Server.Zones[tostring(afterWorld)].CFrame
		if table.find(artefactsArray, artefactExit) then game.ReplicatedStorage.Remotes.Server:FireServer({"ArtefactStatus", "Equip", tostring(artefactExit)}) end
		wait(0.5)
		game.Players.LocalPlayer.PlayerGui.UI.OffSet.Waves.Left.Shadow.Text = "60:57"
		game.ReplicatedStorage.Remotes.Server:FireServer({"Dungeon", "Exit"})
	end
end

local mobsArraySelected = {}
table.clear(mobsArraySelected)
Options.autoFarmDropdown:OnChanged(function()
	table.clear(mobsArraySelected)
    for key, value in next, Options.autoFarmDropdown.Value do
        if not table.find(mobsArraySelected, key) then
        	table.insert(mobsArraySelected, key)
        end
    end
end)

local arrayWorldToRaid = {}
table.clear(arrayWorldToRaid)
Options.whichRaidDropdown:OnChanged(function()
	table.clear(arrayWorldToRaid)
    for key, value in next, Options.whichRaidDropdown.Value do
        if not table.find(arrayWorldToRaid, key) then
        	table.insert(arrayWorldToRaid, key)
        end
    end
end)

-- LEADERBOARDS

local arrayPets, arrayEnergy, arrayGems, arrayTime = {}, {}, {}, {}

local function seeTopRefresh(array, dropdown, whatyouwant, gamepasses)
	if gamepasses == "F2P" or gamepasses == "P2W" then
		table.clear(array)
		for i, v in pairs(workspace.Server.Leaderboards[tostring(whatyouwant)].Frame.UI[tostring(gamepasses)]:GetChildren()) do
			if v:IsA("Frame") and v:FindFirstChild("UID") then
				table.insert(array, v.UID.Text)
				dropdown:SetValues(array)
			end
		end
	end
end

totalEnergyBox:AddDropdown('gamepassesDropdown', {

    Values = {"F2P", "P2W"},
    Default = 1, 
    Multi = false,

    Text = '',
    Tooltip = 'Select F2P or P2W',
})

totalEnergyBox:AddDropdown('totalEnergyDropdown', {

    Values = arrayEnergy,
    Default = 1, 
    Multi = false,

    Text = '',
    Tooltip = 'See the top',
})

totalEnergyBox:AddButton('Refresh the top', function()
    seeTopRefresh(arrayEnergy, Options.totalEnergyDropdown, "TotalEnergy", Options.gamepassesDropdown.Value)
end)

petsHatchedBox:AddDropdown('gamepassesDropdown2', {

    Values = {"F2P", "P2W"},
    Default = 1, 
    Multi = false,

    Text = '',
    Tooltip = 'Select F2P or P2W',
})

petsHatchedBox:AddDropdown('petsHatchedDropdown', {

    Values = arrayPets,
    Default = 1, 
    Multi = false,

    Text = '',
    Tooltip = 'See the top',
})

petsHatchedBox:AddButton('Refresh the top', function()
    seeTopRefresh(arrayPets, Options.petsHatchedDropdown, "PetsHatched", Options.gamepassesDropdown2.Value)
end)

totalGemsBox:AddDropdown('gamepassesDropdown3', {

    Values = {"F2P", "P2W"},
    Default = 1, 
    Multi = false,

    Text = '',
    Tooltip = 'Select F2P or P2W',
})

totalGemsBox:AddDropdown('totalGemsDropdown', {

    Values = arrayGems,
    Default = 1, 
    Multi = false,

    Text = '',
    Tooltip = 'See the top',
})

totalGemsBox:AddButton('Refresh the top', function()
    seeTopRefresh(arrayGems, Options.totalGemsDropdown, "TotalGems", Options.gamepassesDropdown3.Value)
end)

timePlayedBox:AddDropdown('timePlayedDropdown', {

    Values = arrayTime,
    Default = 1, 
    Multi = false,

    Text = '',
    Tooltip = 'See the top',
})

timePlayedBox:AddButton('Refresh the top', function()
    seeTopRefresh(arrayTime, Options.timePlayedDropdown, "TimePlayed", "P2W")
end)

local c1 = coroutine.create(function() while true do if Toggles.AutoFarmToggle.Value == true then autoMobFunc(mobsArraySelected) end wait() end end) coroutine.resume(c1)
local c2 = coroutine.create(function() while true do if Toggles.AutoOFarmToggle.Value == true then if Toggles.AutoDungeonToggle.Value == true and #workspace.Server.Mobs.Dungeon:GetChildren() == 0 then game.ReplicatedStorage.Remotes.Server:FireServer({"MobHit", m, "WeaponAttack"}) elseif Toggles.AutoDungeonToggle.Value == false then game.ReplicatedStorage.Remotes.Server:FireServer({"MobHit", m, "WeaponAttack"}) end end wait() end end) coroutine.resume(c2)
local c3 = coroutine.create(function() while true do if Toggles.AutoCollectToggle.Value == true then for i, v in pairs(workspace.Debris:GetChildren()) do if v:FindFirstChild("UID") then v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame end end end wait(0.1) end end) coroutine.resume(c3)
local c4 = coroutine.create(function() while true do if Toggles.AutoBossToggle.Value == true then autoBossFunc(Options.afterWorldDropdown.Value, arrayWorldToRaid, Toggles.AutoDungeonToggle.Value) end wait(0.1) end end) coroutine.resume(c4)
local c5 = coroutine.create(function() while true do if Toggles.AutoDungeonToggle.Value == true then autoDungeonFunc(Options.afterWorldDungeonDropdown.Value, Options.artefactEnterDropdown.Value, Options.artefactExitDropdown.Value) end wait() end end) coroutine.resume(c5)

wait(1.5)

local VirtualUser=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
VirtualUser:CaptureController()
VirtualUser:ClickButton2(Vector2.new())
end)

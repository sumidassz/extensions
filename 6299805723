game.Players.LocalPlayer.PlayerGui.MainGui.SendMessage:Fire("Correct Key, opening sTempest Hub!", true)
local Material = loadstring(game:HttpGet("https://pastebin.com/raw/vtqFazmD"))()
local Menu = Material.Load({ Title = "Anime Fighter Simulator", Style = 2, SizeX = 355, SizeY = 405, Theme = "Aqua", ColorOverrides = { MainFrame = Color3.fromRGB(235,235,235) }})
local MainTab = Menu.New({ Title = "Main" })
local EggTab = Menu.New({ Title = "Egg" })
-- Variables

-- Functions
local function mainFuncs(plr, farm, whoFarm)
	if plr ~= nil then
		if farm == true and whoFarm ~= "" then
			for i, v in pairs(workspace.Worlds[tostring(plr.World.Value)].Enemies:GetChildren()) do
				if v:IsA("Model") and v:FindFirstChild("Health") and v.Health.Value > 0 and v.Name == whoFarm then
					for _,k in pairs(game:GetService("Workspace").Pets:GetChildren()) do
						if k:FindFirstChild("Data") and k.Data:FindFirstChild("Owner") and k.Data.Owner.Value == game.Players.LocalPlayer and not k.Data.Attacking.Value then
							game.ReplicatedStorage.Bindable.SendPet:Fire(v, false);
							game.ReplicatedStorage.Remote.StartQuest:FireServer(workspace.Worlds[game.Players.LocalPlayer.World.Value][game.Players.LocalPlayer.World.Value])
							game.ReplicatedStorage.Remote.FinishQuest:FireServer(workspace.Worlds[game.Players.LocalPlayer.World.Value][game.Players.LocalPlayer.World.Value])
						end
					end	
					game:GetService("ReplicatedStorage").Remote.ClickerDamage:FireServer()
				end
			end
		end
	end
end
local function collectAllFunc(boolean)
	if boolean == true then
		for i, v in pairs(workspace.Effects:GetChildren()) do
			if v.Name == "Yen" then
				v.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
			end
		end
	end
end
local function getEgg(world)
	if world == "DemonSlayer" then return "DemonEgg" end
	if world == "MLP" then return end
	if world == "BlackClover" then return "BCEgg" end
	if world == "TokyoGhoul" then return "GhoulEgg" end
	if world == "DBZ" then return "GokuEgg" end
	if world == "Tower" or world == "Titan" or world == "TimeChamber" then return nil end
	return tostring(world).."Egg"
end

local function eggFuncs(plr, maxOpen, eggOpen, muchEggOpens)
	if plr ~= nil then
		if maxOpen == true then
			game.ReplicatedStorage.Remote.AttemptMultiOpen:FireServer(getEgg(plr.World.Value))
		end
		if eggOpen == true and muchEggOpens ~= 0 and getEgg(plr.World.Value) ~= nil then
			game.ReplicatedStorage.Remote.OpenEgg:InvokeServer(workspace.Worlds:FindFirstChild(tostring(plr.World.Value))[getEgg(plr.World.Value)], muchEggOpens)
		end
	end
end
local function getNearestForQuest(world, mob)
    local dist, thing = math.huge
    for i, v in next, workspace.Worlds[tostring(world)].Enemies:GetChildren() do
        if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Health") and tonumber(v.Health.Value) > 0 and v.Name == mob then
            local mag =
                (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
            if mag < dist then
                dist = mag
                thing = v
            end
        end
    end
    return thing
end
local function questFunc(plr, farm)
	if farm == true then
		for i, v in pairs(workspace.Worlds[tostring(plr.World.Value)].Enemies:GetChildren()) do
		if v:FindFirstChild("DisplayName") then
			local a = string.match(string.sub(plr.PlayerGui.MainGui.Quest.Objectives.QuestText.Text, 2,3), "%d+")
			local b = string.match(string.sub(plr.PlayerGui.MainGui.Quest.Objectives.QuestText.Text, 4,6), "%d+")
			if tonumber(a) == tonumber(b) then
				game.ReplicatedStorage.Remote.FinishQuest:FireServer(workspace.Worlds[game.Players.LocalPlayer.World.Value][game.Players.LocalPlayer.World.Value])
				game.ReplicatedStorage.Remote.StartQuest:FireServer(workspace.Worlds[game.Players.LocalPlayer.World.Value][game.Players.LocalPlayer.World.Value])
			end
			if "["..tostring(a).."/"..tostring(b).."] "..tostring(v.DisplayName.Value) == tostring(game.Players.LocalPlayer.PlayerGui.MainGui.Quest.Objectives.QuestText.Text) then
				--if string.sub(plr.PlayerGui.MainGui.Quest.Objectives.QuestText.Text, 2,2) == string.sub(plr.PlayerGui.MainGui.Quest.Objectives.QuestText.Text, 4,4) then end
				if v:IsA("Model") and v:FindFirstChild("Health") and v.Health.Value > 0 and v == getNearestForQuest(plr.World.Value, v.Name) then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = getNearestForQuest(plr.World.Value, v.Name).HumanoidRootPart.CFrame
					for _,k in pairs(game:GetService("Workspace").Pets:GetChildren()) do
						if k:FindFirstChild("Data") and k.Data:FindFirstChild("Owner") and k.Data.Owner.Value == game.Players.LocalPlayer and not k.Data.Attacking.Value then
							game.ReplicatedStorage.Bindable.SendPet:Fire(getNearestForQuest(plr.World.Value, v.Name), false);
						end
					end	
					game:GetService("ReplicatedStorage").Remote.ClickerDamage:FireServer()
				end
			end
		end
		end
	end
end
-- Dropdowns
local allEnemies = {}
for i, v in pairs(workspace.Worlds[tostring(game.Players.LocalPlayer.World.Value)].Enemies:GetChildren()) do
	if v:IsA("Model") and not table.find(allEnemies, v.Name) then
		table.insert(allEnemies, v.Name)
	end
end
-- MainTab
local farmB = false
local whatFarmS = ""
local collectB = false
local autoQuestB = false
MainTab.DataTable({
	Text = "Main",
	Callback = function(ChipSet)
		table.foreach(ChipSet, function(Option, Value)
			if Option == "Auto Farm" then
				farmB = Value
			end
			if Option == "Auto Collect" then
				collectB = Value
			end
			if Option == "Auto Quest (don't need to use Auto Farm)" then
				autoQuestB = Value
			end
		end)
	end,
	Options = {
		["Auto Farm"] = false,
		["Auto Quest (don't need to use Auto Farm)"] = false,
		["Auto Collect"] = false
	}
})
local enemieD = MainTab.Dropdown({
	Text = "Choose the enemie",
	Callback = function(v)
		whatFarmS = tostring(v)
	end,
	Options = allEnemies
})
MainTab.Button({
	Text = "Refresh Enemies",
	Callback = function(v)
		table.clear(allEnemies)
		for i, v in pairs(workspace.Worlds[tostring(game.Players.LocalPlayer.World.Value)].Enemies:GetChildren()) do
			if v:IsA("Model") and not table.find(allEnemies, v.Name) then
				table.insert(allEnemies, v.Name)
				enemieD:SetOptions(allEnemies)
			end
		end
	end
})
-- EggTab
local eggB, maxOpenB = false, false
local muchEggN = 1
EggTab.DataTable({
	Text = "Eggs",
	Callback = function(ChipSet)
		table.foreach(ChipSet, function(Option, Value)
			if Option == "Auto MaxOpen" then
				maxOpenB = Value
			end
			if Option == "Auto Egg" then
				eggB = Value
			end
		end)
	end,
	Options = {
		["Auto MaxOpen"] = false,
		["Auto Egg"] = false
	}
})
EggTab.TextField({
	Text = "How much eggs you open?",
	Callback = function(v)
		muchEggN = tonumber(v)
		game.Players.LocalPlayer.PlayerGui.MainGui.SendMessage:Fire(tostring(v).." eggs", true)
	end
})
local c1 = coroutine.create(function() while true do mainFuncs(game.Players.LocalPlayer, farmB, tostring(whatFarmS)) wait() end end) coroutine.resume(c1)
local c2 = coroutine.create(function() while true do eggFuncs(game.Players.LocalPlayer, maxOpenB, eggB, muchEggN) wait() end end) coroutine.resume(c2)
local c3 = coroutine.create(function() while true do collectAllFunc(collectB) wait() end end) coroutine.resume(c3)
local c4 = coroutine.create(function() while true do questFunc(game.Players.LocalPlayer, autoQuestB) wait() end end) coroutine.resume(c4)
